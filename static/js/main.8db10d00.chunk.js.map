{"version":3,"sources":["Components/Todoinput.js","Components/Todoitem.js","Components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Todoinput","_this$props","this","props","item","handleChange","handleSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","value","Component","Todoitem","title","handleDelete","handleEdit","onClick","Todolist","items","clearList","map","Todoitem_Todoitem","key","id","App","state","uuid","e","_this","setState","target","preventDefault","newItem","updatedItems","concat","Object","toConsumableArray","filteredItem","filter","selectedItem","find","Todoinput_Todoinput","Todolist_Todolist","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8db10d00.chunk.js","sourcesContent":["import React, {Component } from \"react\";\r\n\r\nexport default class Todoinput extends Component{\r\n    render(){\r\n        const{item,handleChange,handleSubmit,editItem} = this.props;\r\n        return(\r\n            <div className=\"card card-body my-3\">\r\n               <form onSubmit = {handleSubmit}>\r\n                   <div className=\"input-group\">\r\n                   <div className=\"input-group-prepend\">\r\n                   <div className=\"input-group-text bg-primary text-white\">\r\n                   <i className=\"fas fa-pen\" />\r\n                   </div>\r\n                   </div>\r\n                   <input \r\n                    type=\"text\" \r\n                    className=\"form-control text-capitalize\"\r\n                    placeholder=\"Add tasks\" \r\n                    onChange = {handleChange}\r\n                    value = {item}/>\r\n                   \r\n                   </div>\r\n                   <button type=\"submit\" \r\n                    className=\"btn btn-block btn-primary mt-3\">\r\n                    {editItem ? \"Edit task\" : \"Add task\"} \r\n                  </button>\r\n               </form>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class Todoitem extends Component {\r\n   render(){\r\n       const{title,handleDelete,handleEdit}=this.props;\r\n       return(\r\n           <div>\r\n               <li className=\"list-group-item text-capitalize\r\n                d-flex justify-content-between my-2\">\r\n                <h6>{title}</h6>\r\n                <div className=\"todo-icon\" >\r\n                <span className=\"mx-2 text-success\" onClick ={handleEdit}>\r\n                <i className=\"fas fa-pen\" />\r\n                </span>\r\n                <span className=\"mx-2 text-danger\" onClick ={handleDelete}>\r\n                <i className=\"fas fa-trash\" />\r\n                </span>\r\n                </div>\r\n                </li>\r\n           </div>\r\n       )\r\n   }\r\n}","import React, { Component } from \"react\";\r\nimport Todoitem from \"./Todoitem\";\r\n\r\n\r\nexport default class Todolist extends Component {\r\n   render(){\r\n    const{items,clearList,handleDelete,handleEdit} =this.props;\r\n    return(\r\n           <div>\r\n            <ul className=\"list-group my-5\">\r\n              <h3 className=\"text-capitalize text-center\">\r\n              todo list\r\n              </h3>{ items.map(item =>{\r\n                return (\r\n                    < Todoitem \r\n                    key={item.id} \r\n                    title ={item.title}\r\n                    handleDelete = {()=>handleDelete(item.id)}\r\n                    handleEdit = {()=>handleEdit(item.id)} />\r\n                )\r\n              })}\r\n              \r\n              <button type=\"submit\" \r\n                    className=\"btn btn-block btn-danger mt-3 text-capitalize\" onClick={clearList}>\r\n                    delete tasks\r\n                  </button>\r\n            </ul>\r\n\r\n           </div>\r\n       )\r\n   }\r\n}","import React, { Component } from 'react';\nimport Todoinput from   \"./Components/Todoinput\";\nimport Todolist from   \"./Components/Todolist\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"uuid\";\n\nclass App extends Component {\n  state ={\n    items:[],\n    id:uuid(),\n    item:\"\",\n    editItem:false\n  };\n  handleChange = (e) =>{\n    this.setState({\n      item: e.target.value,\n    }) \n  };\n\n  handleSubmit = (e)=>{\n      e.preventDefault();\n\n      const newItem = {\n        id: this.state.id,\n        title: this.state.item\n      }\n\n      const updatedItems = [...this.state.items,newItem];\n      this.setState({\n        items: updatedItems,\n        item: \"\",\n        id: uuid(),\n        editItem:false\n      })\n\n  }\n\n  clearList = ()=>{\n    this.setState({\n      items:[]\n    })\n  }\n  handleDelete =id=>{\n    const filteredItem = this.state.items.filter(item=> item.id !==id);\n    this.setState({items:filteredItem})\n  } \n\n  handleEdit= id=>{\n    const filteredItem = this.state.items.filter(item=> item.id !==id);  \n    \n    const selectedItem = this.state.items.find(item => item.id === id);\n    this.setState({\n      items:filteredItem,\n      item:selectedItem.title,\n      editItem:true,\n\n\n    })\n  \n  }\n  render() {\n    return (\n      <div className=\"container\">\n      <div className=\"row\">\n      <div className=\"col-10 mx-auto col-md-8 mt-4\" >\n         <h3 className=\"text-capitilize text-center\">Todo Input</h3>       \n        < Todoinput item ={this.state.item} \n          handleChange = {this.handleChange}\n          handleSubmit = {this.handleSubmit}\n          editItem = {this.state.editItem}/>\n       < Todolist items = {this.state.items}\n          clearList = {this.clearList} \n          handleDelete = {this.handleDelete}\n          handleEdit ={this.handleEdit}\n          />\n      </div>\n      </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}